class Solution {
public:
        //calculating the total time 
        long long totalTime(vector<int>&piles,int i){
            long long  totaltime=0;
            for(int j=0;j<piles.size();j++){
                totaltime+=(long long)ceil((double)piles[j]/(double)i);
            }
            return totaltime;
        }
    int minEatingSpeed(vector<int>& piles, int h) {
        //steps consisting of 1.finding the max element 2. finding  the total time by an particular K while iterting from 1-maxelement 3. using binary search 

        //finding the max element 
        int maxi=*max_element(piles.begin(),piles.end());
        //use binary searching
        int left=1,right=maxi;
        int mini=INT_MAX;
        while(left<=right){
            int mid=left+(right-left)/2;
            long long time=totalTime(piles,mid);
            if(time<=h){
                mini=min(mini,mid);
                right=mid-1;
            }
            else{
                left=mid+1; 
            }
        }
        return mini;

    }
};
